// Program to set the KMS server and activate Office 2013 products
// Program requires a command line argument in the form of the IP or name of the KMS server...
// e.g OfficeActivation.exe 10.10.10.1

// Will exit cleanly (return 0) even if an Office 2013 installation cannot be found, as the... 
// executable will be used in an MDT task sequence.
// The program will drop two text logs if successful C:\Windows\Temp\Office2013_KMS.txt and Office2013_Activation.txt
// If an Office 2013 installation cannot be found, the log file C:\Windows\Temp\Office2013_Error.txt will be created

// Mike Pursell 2015

using System;
using System.IO;
using System.Diagnostics;

namespace OfficeActivation
{

    class Office2013Activator
    {

        public string officeLocation32 = "C:\\Program Files\\Microsoft Office\\Office15\\ospp.vbs";
        public string officeLocation64 = "C:\\Program Files (x86)\\Microsoft Office\\Office15\\ospp.vbs";
        
        public void Kms(string architecture, string server)
        {

            string setKMS = " /sethst:" + server; // switch for ospp.vbs to set the KMS server.  
                                                  // IP or Name is passed via the command line

            string logFile = "C:\\Windows\\Temp\\Office2013_KMS.txt";

            // Start the child process.
            Process kms = new Process();
                // Redirect the output stream of the child process.
                kms.StartInfo.UseShellExecute = false;
                kms.StartInfo.RedirectStandardOutput = true;
                // Program to start plus arguments
                kms.StartInfo.FileName = "cscript.exe";
                kms.StartInfo.Arguments = "\"" + architecture + "\"" + setKMS;
                kms.Start();
                // Do not wait for the child process to exit before
                // reading to the end of its redirected stream.
                // p.WaitForExit();
                // Read the output stream first and then wait.
                string output = kms.StandardOutput.ReadToEnd();
                Console.WriteLine(output);
                File.WriteAllText(logFile, output);
                kms.WaitForExit();
        }

        public void ActivateProducts(string architecture)
        {
            string activateOffice = " /act"; // switch for ospp.vbs to activate via KMS
            string logFile = "C:\\Windows\\Temp\\Office2013_Activation.txt";

            Process activate = new Process();

                activate.StartInfo.UseShellExecute = false;
                activate.StartInfo.RedirectStandardOutput = true;
                activate.StartInfo.FileName = "cscript.exe";
                activate.StartInfo.Arguments = "\"" + architecture + "\"" + activateOffice;
                activate.Start();

                string output = activate.StandardOutput.ReadToEnd();
                Console.WriteLine(output);
                File.WriteAllText(logFile, output);
                activate.WaitForExit();
        }
    }
    class Program
    {
        static int Main(string[] args)
        {

            // Instantiate a new object of the Office2013Activate class
            Office2013Activator activator = new Office2013Activator();

            if (args.Length == 0)
            {
                System.Console.WriteLine("\nPlease enter the name or IP of the KMS server as a command line argument.");
                System.Console.WriteLine("e.g OfficeActivation.exe 10.10.10.1");
                return 1;
            }

            else if (args.Length > 1)
            {
                System.Console.WriteLine("\nToo many arguments given");
                return 1;
            }

            else
            {
                
                

                // Check if the 32bit Program Files\ospp.vbs file exists - 
                // Since the folder exists on both 64bit and 32bit systems we also check that the
                // Program Files (x86)\ospp.vbs location does not exist, confirming that the system is 32bit.

                if (File.Exists(activator.officeLocation32) && !File.Exists(activator.officeLocation64))
                {

                    Console.WriteLine("Activating Office 32bit");
                    Console.WriteLine("Logging to C:\\Windows\\Temp");

                    // run the new object's methods with the appropriate file location
                    activator.Kms(activator.officeLocation32, args[0]);
                    activator.ActivateProducts(activator.officeLocation32);

                    return 0;

                }

                else if (File.Exists(activator.officeLocation64))
                {
                    Console.WriteLine("Activating Office 64bit");
                    Console.WriteLine("Logging to C:\\Windows\\Temp");

                    activator.Kms(activator.officeLocation64, args[0]);
                    activator.ActivateProducts(activator.officeLocation64);

                    return 0;
                }

                else
                {
                    File.WriteAllText("C:\\Windows\\Temp\\OfficeActivation_Error.txt", "Office 2013 installation not found.");
                    Console.WriteLine("Cannot detect an Office 2013 installation");

                    // We want this to return 0 as we're using it in an MDT task sequence, and require a clean exit 
                    // whether or not an Office 2013 installation is present
                    return 0;

                }
            }     
            
        }
    }
}
